generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma" - this is deleted
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

// create your own model below
model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples")
}

model User {
  id           Int           @id @default(autoincrement())
  fullName     String
  email        String        @unique
  password     String
  role         Role          @default(USER)
  deletedAt    DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Store        Store[]
  transactions Transaction[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Store {
  id        Int       @id @default(autoincrement())
  name      String
  address   String
  userId    Int
  user      User      @relation(fields: [userId], references: [id]) // shift + alt + f
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@map("stores")
}

model Product {
  id           Int           @id @default(autoincrement())
  name         String
  thumbnail    String
  price        Int
  stock        Int
  storeId      Int
  slug         String        @unique
  store        Store         @relation(fields: [storeId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  transactions Transaction[]

  @@map("products")
}

model Event {
  id          Int       @id @default(autoincrement())
  categoryId  Int
  organizerId Int
  slug        String
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
  location    String
  thumbnail   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@map("events")
}

model Transaction {
  id           Int               @id @default(autoincrement())
  uuid         String            @unique @default(uuid())
  productId    Int
  product      Product           @relation(fields: [productId], references: [id])
  qty          Int
  status       TransactionStatus @default(WAITING_FOR_PAYMENT)
  paymentProof String?
  userId       Int
  user         User              @relation(fields: [userId], references: [id])
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@map("transactions")
}

enum TransactionStatus {
  WAITING_FOR_PAYMENT
  WAITING_CONFIRMATION
  PAID
  REJECTED
  EXPIRED
}
